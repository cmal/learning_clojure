{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1478436953000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1478436953000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1478436953000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1478436953000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1478436953000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1478436953000},{"_id":"source/_drafts/hello-world.org","hash":"c70a5020a605cc4671224f1b9046be961aa5dded","modified":1478438318000},{"_id":"source/_posts/destructuring-assignment.org","hash":"a90562e18e42bff2622ca92df0a10778687dbdb5","modified":1478448583000},{"_id":"source/_drafts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1478436953000},{"_id":"source/_posts/lambda-vs-literal-fn.org","hash":"e42f69845db2bc215a8ae0685ae9e27b6ecc2ec8","modified":1478448595000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1478436953000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1478436953000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1478436953000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1478436953000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1478436953000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1478436953000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1478436953000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1478436953000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1478436953000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1478436953000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1478436953000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1478436953000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1478436953000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1478436953000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1478436953000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1478436953000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1478436953000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1478436953000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1478436953000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1478436953000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1478436953000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478436953000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1478436953000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1478436953000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1478436953000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1478436953000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1478436953000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1478436953000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1478436953000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1478436953000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1478436953000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1478436953000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1478436953000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1478436953000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1478436953000},{"_id":"public/2016/11/06/lambda-vs-literal-fn/index.html","hash":"19e3112b0912db24900b2ecaad104a6a2e883920","modified":1478484112431},{"_id":"public/index.html","hash":"826987d0d37143e65358096380b1e3d05892b66e","modified":1478484112431},{"_id":"public/archives/index.html","hash":"05420466a8ffa40fb32a475df148b125c4abf242","modified":1478484112434},{"_id":"public/archives/2016/index.html","hash":"664556dcc07b2261a517d1ff59dabf4547c21d19","modified":1478484112434},{"_id":"public/archives/2016/11/index.html","hash":"111f55f89c323a83066dc362617a85755a6dcfb1","modified":1478484112434},{"_id":"public/categories/clojure/index.html","hash":"5012bba4f3cb2f5953e250990a9da5cce4060a78","modified":1478484112434},{"_id":"public/tags/ClojureBasics/index.html","hash":"3840d7bf21105921e0dde2bda66654789c14f922","modified":1478484112435},{"_id":"public/2016/11/06/destructuring-assignment/index.html","hash":"795b560b72d6dfca9bceb9e0b312c6d33aecd9b1","modified":1478484112435},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478484112440},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478484112440},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478484112440},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478484112440},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478484112440},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478484112440},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478484112440},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1478484112440},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1478484112440},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1478484112442},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1478484113214},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1478484113222},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1478484113222},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1478484113223},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1478484113223},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1478484113223},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478484113223},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478484113223},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1478484113223},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1478484113223},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1478484113223},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1478484113227},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1478484113227}],"Category":[{"name":"orgmode","_id":"civ7f9leu0005r1kzjyjggwp7"},{"name":"clojure","_id":"civ7f9lg20007r1kza3m2g0ff"}],"Data":[],"Page":[],"Post":[{"_content":"#+TITLE: Hello,orgmode\n#+DATE: <2015-11-15 Sun 17:00>\n#+TAGS: emacs, orgmode, hexo\n#+LAYOUT: post\n#+CATEGORIES: orgmode\n* Orgmode\n** Why org\n#+BEGIN_SRC js\nconsole.log('hello');\n#+END_SRC\n我编不下去了。。\n\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n\n#+ATTR_HTML:  :alt caption\n[[image url]]\n","source":"_drafts/hello-world.org","raw":"#+TITLE: Hello,orgmode\n#+DATE: <2015-11-15 Sun 17:00>\n#+TAGS: emacs, orgmode, hexo\n#+LAYOUT: post\n#+CATEGORIES: orgmode\n* Orgmode\n** Why org\n#+BEGIN_SRC js\nconsole.log('hello');\n#+END_SRC\n我编不下去了。。\n\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n\n#+ATTR_HTML:  :alt caption\n[[image url]]\n","slug":"hello-world","published":0,"date":"2015-11-15T09:00:00.000Z","updated":"2016-11-06T13:18:38.000Z","title":"Hello,orgmode","comments":1,"layout":"post","photos":[],"link":"","_id":"civ7f9lcm0000r1kzgvphmwsx","content":"\n\n<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Orgmode</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\">Why org</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&apos;hello&apos;</span>);</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n&#x6211;&#x7F16;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#x3002;&#x3002;\n</p>\n\n<a id=\"more\"></a>\n\n<p>\n<i>image url</i>\n</p>\n</div>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\" target=\"_blank\" rel=\"external\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\" target=\"_blank\" rel=\"external\">Org Source</a> - Last Updated 2016-11-06 &#x65E5; 21:18.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)</div>\n","excerpt":"<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Orgmode</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\">Why org</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&apos;hello&apos;</span>);</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n&#x6211;&#x7F16;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#x3002;&#x3002;\n</p>","more":"<p>\n<i>image url</i>\n</p>\n</div>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\">Org Source</a> - Last Updated 2016-11-06 &#x65E5; 21:18.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</div>"},{"_content":"#+TITLE: Clojure Destructuring Assignment\n#+DATE: <2016-11-06 Sun 22:00>\n#+TAGS: ClojureBasics,\n#+LAYOUT: post\n#+CATEGORIES: clojure\n\n* Clojure Destructuring Assignment\n\nA simple example of Clojure's ~let~ assignment:\n#+BEGIN_SRC clojure\n  (let [x 8]\n   (+ 10 x))\n  ;; => 18\n#+END_SRC\n\n** Sequential Destructuring\n\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n\nTo omit trailing values in seq:\n#+BEGIN_SRC clojure\n  (let [[x y z] [1 2 3 4 5]]\n    (str x y z))\n  ;; => \"123\"\n#+END_SRC\n\nTo omit arbitrary values in seq:\n#+BEGIN_SRC clojure\n  (let [[x _ _ [y z]] [ 1 2 3 [4 5]]]\n    (str x y z))\n  ;; => \"145\"\n#+END_SRC\n\nTo gather extra-positional values:\n#+BEGIN_SRC clojure\n  (let [[x & rest] [1 2 3]]\n    rest)\n  ;; => (2 3)\n#+END_SRC\n\nTo retain the destructured seq:\n#+BEGIN_SRC clojure\n  (let [[x _ z :as s] [1 2 3]]\n    s)\n  ;; => [1 2 3]\n#+END_SRC\n\n** Map Destructuring\n\nMap destructuring is not so intuitive as sequential destructuring.\nA common example:\n#+BEGIN_SRC clojure\n  (let [{a :a b :b c \"foo\"} {:a 1 :b 2 \"foo\" \"bar\"}]\n    (str a b c))\n  ;; => \"12bar\"\n#+END_SRC\n\nTo destructure a seq using index:\n#+BEGIN_SRC clojure\n  (let [{x 3 y 2} [1 2 3 4 5]]\n    (str x y))\n  ;; => \"43\"\n#+END_SRC\n\nTo destructure a nesting map:\n#+BEGIN_SRC clojure\n  (let [{{x :a} :b} {:b {:b 1 :a 2}}]\n    x)\n  ;; => 2\n  (let [{[x _ y] :b} {:b [1 2 3]}]\n    [x y])\n  ;; => [1 3]\n#+END_SRC\n\nDefault values when not found:\n#+BEGIN_SRC clojure\n  (let [{k :unknown x :a :or {k \"not found\"}}\n        {:a 1 :b 2}]\n    (str k x))\n  ;; => \"not found1\"\n#+END_SRC\n\nBinding using ~:keys~, ~:strs~, and ~:syms~:\n#+BEGIN_SRC clojure\n  (let [mp {:a 1 :b 2 :c 3 \"d\" 4 \"e\" 5 \"f\" 6 'g 7 'h 8}\n        {:keys [a b c]} mp\n        {:strs [d e f]} mp\n        {:syms [g h]} mp]\n    (str a b c d e f g h))\n  ;; => \"12345678\"\n#+END_SRC\n\n~&~ will destructure rest sequences as map k/v pairs:\n#+BEGIN_SRC clojure\n  (let [[k v & {:keys [b c d]}] [:a 1 :b 2 :c 3 :d 4]]\n    [(str k v) (str b c d)])\n  ;; => [\":a1\" \"234\"]\n#+END_SRC\n\nCollections can be used as keyword for destructuring:\n(a not so intuitive example)\n#+BEGIN_SRC clojure\n  (let [[& {x [:a 1]}] '([:a 1] 2)]\n    x)\n  ;; => 2\n#+END_SRC\n\n** Destructuring in ~fn~\n\n~fn~ implies a ~let~ in its assignment and a ~do~ in its body.\nActually, you can think the lambda function ~fn~ structure\n#+BEGIN_SRC clojure\n  ((fn [x]\n     (+ 10 x))\n   8)\n#+END_SRC\nas something like:\n#+BEGIN_SRC clojure\n  (let [x 8]\n    (do\n      (+ 10 x)))\n#+END_SRC\nThen EVERYTHING ABOVE can be used in destructuring assignments of ~fn~, just like in ~let~.\nBut ~fn~ can do more, because of [[http://clojure-doc.org/articles/language/functions.html#multi-arity-functions][arity variadic]].\n","source":"_posts/destructuring-assignment.org","raw":"#+TITLE: Clojure Destructuring Assignment\n#+DATE: <2016-11-06 Sun 22:00>\n#+TAGS: ClojureBasics,\n#+LAYOUT: post\n#+CATEGORIES: clojure\n\n* Clojure Destructuring Assignment\n\nA simple example of Clojure's ~let~ assignment:\n#+BEGIN_SRC clojure\n  (let [x 8]\n   (+ 10 x))\n  ;; => 18\n#+END_SRC\n\n** Sequential Destructuring\n\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n\nTo omit trailing values in seq:\n#+BEGIN_SRC clojure\n  (let [[x y z] [1 2 3 4 5]]\n    (str x y z))\n  ;; => \"123\"\n#+END_SRC\n\nTo omit arbitrary values in seq:\n#+BEGIN_SRC clojure\n  (let [[x _ _ [y z]] [ 1 2 3 [4 5]]]\n    (str x y z))\n  ;; => \"145\"\n#+END_SRC\n\nTo gather extra-positional values:\n#+BEGIN_SRC clojure\n  (let [[x & rest] [1 2 3]]\n    rest)\n  ;; => (2 3)\n#+END_SRC\n\nTo retain the destructured seq:\n#+BEGIN_SRC clojure\n  (let [[x _ z :as s] [1 2 3]]\n    s)\n  ;; => [1 2 3]\n#+END_SRC\n\n** Map Destructuring\n\nMap destructuring is not so intuitive as sequential destructuring.\nA common example:\n#+BEGIN_SRC clojure\n  (let [{a :a b :b c \"foo\"} {:a 1 :b 2 \"foo\" \"bar\"}]\n    (str a b c))\n  ;; => \"12bar\"\n#+END_SRC\n\nTo destructure a seq using index:\n#+BEGIN_SRC clojure\n  (let [{x 3 y 2} [1 2 3 4 5]]\n    (str x y))\n  ;; => \"43\"\n#+END_SRC\n\nTo destructure a nesting map:\n#+BEGIN_SRC clojure\n  (let [{{x :a} :b} {:b {:b 1 :a 2}}]\n    x)\n  ;; => 2\n  (let [{[x _ y] :b} {:b [1 2 3]}]\n    [x y])\n  ;; => [1 3]\n#+END_SRC\n\nDefault values when not found:\n#+BEGIN_SRC clojure\n  (let [{k :unknown x :a :or {k \"not found\"}}\n        {:a 1 :b 2}]\n    (str k x))\n  ;; => \"not found1\"\n#+END_SRC\n\nBinding using ~:keys~, ~:strs~, and ~:syms~:\n#+BEGIN_SRC clojure\n  (let [mp {:a 1 :b 2 :c 3 \"d\" 4 \"e\" 5 \"f\" 6 'g 7 'h 8}\n        {:keys [a b c]} mp\n        {:strs [d e f]} mp\n        {:syms [g h]} mp]\n    (str a b c d e f g h))\n  ;; => \"12345678\"\n#+END_SRC\n\n~&~ will destructure rest sequences as map k/v pairs:\n#+BEGIN_SRC clojure\n  (let [[k v & {:keys [b c d]}] [:a 1 :b 2 :c 3 :d 4]]\n    [(str k v) (str b c d)])\n  ;; => [\":a1\" \"234\"]\n#+END_SRC\n\nCollections can be used as keyword for destructuring:\n(a not so intuitive example)\n#+BEGIN_SRC clojure\n  (let [[& {x [:a 1]}] '([:a 1] 2)]\n    x)\n  ;; => 2\n#+END_SRC\n\n** Destructuring in ~fn~\n\n~fn~ implies a ~let~ in its assignment and a ~do~ in its body.\nActually, you can think the lambda function ~fn~ structure\n#+BEGIN_SRC clojure\n  ((fn [x]\n     (+ 10 x))\n   8)\n#+END_SRC\nas something like:\n#+BEGIN_SRC clojure\n  (let [x 8]\n    (do\n      (+ 10 x)))\n#+END_SRC\nThen EVERYTHING ABOVE can be used in destructuring assignments of ~fn~, just like in ~let~.\nBut ~fn~ can do more, because of [[http://clojure-doc.org/articles/language/functions.html#multi-arity-functions][arity variadic]].\n","slug":"destructuring-assignment","published":1,"date":"2016-11-06T14:00:00.000Z","updated":"2016-11-06T16:09:43.000Z","title":"Clojure Destructuring Assignment","comments":1,"layout":"post","photos":[],"link":"","_id":"civ7f9lct0001r1kz8xpu4jck","content":"\n\n<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Clojure Destructuring Assignment</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nA simple example of Clojure&apos;s <code>let</code> assignment:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[x <span class=\"number\">8</span>]</span></span><br><span class=\"line\"> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 18</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\">Sequential Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<a id=\"more\"></a>\n\n<p>\nTo omit trailing values in seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x y z]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y z)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;123&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo omit arbitrary values in seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x _ _ <span class=\"collection\">[y z]</span>]</span> <span class=\"collection\">[ <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"collection\">[<span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y z)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;145&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo gather extra-positional values:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x &amp; rest]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>]</span></span><br><span class=\"line\">  rest)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (2 3)</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo retain the destructured seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x _ z <span class=\"attribute\">:as</span> s]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>]</span></span><br><span class=\"line\">  s)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [1 2 3]</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\">Map Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\nMap destructuring is not so intuitive as sequential destructuring.\nA common example:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{a <span class=\"attribute\">:a</span> b <span class=\"attribute\">:b</span> c <span class=\"string\">&quot;foo&quot;</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"string\">&quot;foo&quot;</span> <span class=\"string\">&quot;bar&quot;</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> a b c)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;12bar&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo destructure a seq using index:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{x <span class=\"number\">3</span> y <span class=\"number\">2</span>}</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;43&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo destructure a nesting map:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{<span class=\"collection\">{x <span class=\"attribute\">:a</span>}</span> <span class=\"attribute\">:b</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"number\">1</span> <span class=\"attribute\">:a</span> <span class=\"number\">2</span>}</span>}</span>]</span></span><br><span class=\"line\">  x)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 2</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{<span class=\"collection\">[x _ y]</span> <span class=\"attribute\">:b</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"collection\">[x y]</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [1 3]</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nDefault values when not found:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{k <span class=\"attribute\">:unknown</span> x <span class=\"attribute\">:a</span> <span class=\"attribute\">:or</span> <span class=\"collection\">{k <span class=\"string\">&quot;not found&quot;</span>}</span>}</span></span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> k x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;not found1&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nBinding using <code>:keys</code>, <code>:strs</code>, and <code>:syms</code>:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[mp <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"attribute\">:c</span> <span class=\"number\">3</span> <span class=\"string\">&quot;d&quot;</span> <span class=\"number\">4</span> <span class=\"string\">&quot;e&quot;</span> <span class=\"number\">5</span> <span class=\"string\">&quot;f&quot;</span> <span class=\"number\">6</span> &apos;g <span class=\"number\">7</span> &apos;h <span class=\"number\">8</span>}</span></span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:keys</span> <span class=\"collection\">[a b c]</span>}</span> mp</span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:strs</span> <span class=\"collection\">[d e f]</span>}</span> mp</span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:syms</span> <span class=\"collection\">[g h]</span>}</span> mp]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> a b c d e f g h)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;12345678&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n<code>&amp;</code> will destructure rest sequences as map k/v pairs:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[k v &amp; <span class=\"collection\">{<span class=\"attribute\">:keys</span> <span class=\"collection\">[b c d]</span>}</span>]</span> <span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"attribute\">:c</span> <span class=\"number\">3</span> <span class=\"attribute\">:d</span> <span class=\"number\">4</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"collection\">[<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> k v)</span> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> b c d)</span>]</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [&quot;:a1&quot; &quot;234&quot;]</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nCollections can be used as keyword for destructuring:\n(a not so intuitive example)\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[&amp; <span class=\"collection\">{x <span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span>]</span>}</span>]</span> &apos;<span class=\"list\">(<span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span>]</span> <span class=\"number\">2</span>)</span>]</span></span><br><span class=\"line\">  x)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 2</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\">Destructuring in <code>fn</code></h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\n<code>fn</code> implies a <code>let</code> in its assignment and a <code>do</code> in its body.\nActually, you can think the lambda function <code>fn</code> structure\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[x]</span></span><br><span class=\"line\">   <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span></span><br><span class=\"line\"> <span class=\"number\">8</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nas something like:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[x <span class=\"number\">8</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span></span><br><span class=\"line\">    <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nThen EVERYTHING ABOVE can be used in destructuring assignments of <code>fn</code>, just like in <code>let</code>.\nBut <code>fn</code> can do more, because of <a href=\"http://clojure-doc.org/articles/language/functions.html#multi-arity-functions\" target=\"_blank\" rel=\"external\">arity variadic</a>.\n</p>\n</div>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\" target=\"_blank\" rel=\"external\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\" target=\"_blank\" rel=\"external\">Org Source</a> - Last Updated 2016-11-07 &#x4E00; 00:09.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)</div>\n","excerpt":"<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Clojure Destructuring Assignment</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nA simple example of Clojure&apos;s <code>let</code> assignment:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[x <span class=\"number\">8</span>]</span></span><br><span class=\"line\"> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 18</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\">Sequential Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">","more":"<p>\nTo omit trailing values in seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x y z]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y z)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;123&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo omit arbitrary values in seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x _ _ <span class=\"collection\">[y z]</span>]</span> <span class=\"collection\">[ <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"collection\">[<span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y z)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;145&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo gather extra-positional values:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x &amp; rest]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>]</span></span><br><span class=\"line\">  rest)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (2 3)</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo retain the destructured seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x _ z <span class=\"attribute\">:as</span> s]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>]</span></span><br><span class=\"line\">  s)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [1 2 3]</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\">Map Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\nMap destructuring is not so intuitive as sequential destructuring.\nA common example:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{a <span class=\"attribute\">:a</span> b <span class=\"attribute\">:b</span> c <span class=\"string\">&quot;foo&quot;</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"string\">&quot;foo&quot;</span> <span class=\"string\">&quot;bar&quot;</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> a b c)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;12bar&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo destructure a seq using index:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{x <span class=\"number\">3</span> y <span class=\"number\">2</span>}</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;43&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo destructure a nesting map:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{<span class=\"collection\">{x <span class=\"attribute\">:a</span>}</span> <span class=\"attribute\">:b</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"number\">1</span> <span class=\"attribute\">:a</span> <span class=\"number\">2</span>}</span>}</span>]</span></span><br><span class=\"line\">  x)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 2</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{<span class=\"collection\">[x _ y]</span> <span class=\"attribute\">:b</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"collection\">[x y]</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [1 3]</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nDefault values when not found:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{k <span class=\"attribute\">:unknown</span> x <span class=\"attribute\">:a</span> <span class=\"attribute\">:or</span> <span class=\"collection\">{k <span class=\"string\">&quot;not found&quot;</span>}</span>}</span></span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> k x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;not found1&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nBinding using <code>:keys</code>, <code>:strs</code>, and <code>:syms</code>:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[mp <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"attribute\">:c</span> <span class=\"number\">3</span> <span class=\"string\">&quot;d&quot;</span> <span class=\"number\">4</span> <span class=\"string\">&quot;e&quot;</span> <span class=\"number\">5</span> <span class=\"string\">&quot;f&quot;</span> <span class=\"number\">6</span> &apos;g <span class=\"number\">7</span> &apos;h <span class=\"number\">8</span>}</span></span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:keys</span> <span class=\"collection\">[a b c]</span>}</span> mp</span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:strs</span> <span class=\"collection\">[d e f]</span>}</span> mp</span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:syms</span> <span class=\"collection\">[g h]</span>}</span> mp]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> a b c d e f g h)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;12345678&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n<code>&amp;</code> will destructure rest sequences as map k/v pairs:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[k v &amp; <span class=\"collection\">{<span class=\"attribute\">:keys</span> <span class=\"collection\">[b c d]</span>}</span>]</span> <span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"attribute\">:c</span> <span class=\"number\">3</span> <span class=\"attribute\">:d</span> <span class=\"number\">4</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"collection\">[<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> k v)</span> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> b c d)</span>]</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [&quot;:a1&quot; &quot;234&quot;]</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nCollections can be used as keyword for destructuring:\n(a not so intuitive example)\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[&amp; <span class=\"collection\">{x <span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span>]</span>}</span>]</span> &apos;<span class=\"list\">(<span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span>]</span> <span class=\"number\">2</span>)</span>]</span></span><br><span class=\"line\">  x)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 2</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\">Destructuring in <code>fn</code></h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\n<code>fn</code> implies a <code>let</code> in its assignment and a <code>do</code> in its body.\nActually, you can think the lambda function <code>fn</code> structure\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[x]</span></span><br><span class=\"line\">   <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span></span><br><span class=\"line\"> <span class=\"number\">8</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nas something like:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[x <span class=\"number\">8</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span></span><br><span class=\"line\">    <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nThen EVERYTHING ABOVE can be used in destructuring assignments of <code>fn</code>, just like in <code>let</code>.\nBut <code>fn</code> can do more, because of <a href=\"http://clojure-doc.org/articles/language/functions.html#multi-arity-functions\">arity variadic</a>.\n</p>\n</div>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\">Org Source</a> - Last Updated 2016-11-07 &#x4E00; 00:09.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</div>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"date":"2016-11-06T12:45:56.000Z","updated":"2016-11-06T12:55:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ7f9ldb0002r1kze5xil6a8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"_content":"#+TITLE: Differences Between Lambda functions and literal functions\n#+DATE: <2016-11-06 Sun 23:00>\n#+TAGS: ClojureBasics,\n#+LAYOUT: post\n#+CATEGORIES: clojure\n* Differences\nThere are a few (as far as I know) differences between lambda functions (~fn~) and literal functions (~#(...)~):\n\n1. By definition, literal functions are the reader form(or sugar) of Clojure compiler, but lambda functions are not.\n\n   So ~read-string~ can be applied to literal functions.\n   #+BEGIN_SRC clojure\n     (read-string \"#(inc %)\")\n     ;; => (fn* [p1__37093#] (inc p1__37093#))\n   #+END_SRC\n\n2. [[../destructuring_assignment/#sec-1-3][Last time]] I say that ~fn~ implies a ~do~ in its body.\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n\n   #+BEGIN_SRC clojure\n     ((fn [x]\n         (prn x)\n         x) 3)\n   #+END_SRC\n   but literal functions must explicitly use ~do~ to wrap the two actions:\n   #+BEGIN_SRC clojure\n     (#(do (prn %)\n            %) 3)\n   #+END_SRC\n\n3. Literal functions cannot explicitly do arity variadic:\n\n   ~fn~ can do this:\n   #+BEGIN_SRC clojure\n     (fn []\n       (do sth1...)\n       [x]\n       (do sth2...)\n       [x y]\n       (do sth3...)\n       [x y & rest]\n       (do sth4...))\n   #+END_SRC\n   but literal functions can not.\n   However, literal functions can define a variadic function by using ~%&~:\n   #+BEGIN_SRC clojure\n     #(- % (apply + %&))\n     ;; this is exactly like\n     (fn [x & rest]\n       (- x (apply + rest)))\n   #+END_SRC\n\n4. Literal functions cannot be nested:\n\n   #+BEGIN_SRC clojure\n     ;; You CANNOT do this:\n     #(#(inc %))\n     ;; but you can use nest lambda functions:\n     (fn [x] (fn [y] (inc y)))\n   #+END_SRC\n","source":"_posts/lambda-vs-literal-fn.org","raw":"#+TITLE: Differences Between Lambda functions and literal functions\n#+DATE: <2016-11-06 Sun 23:00>\n#+TAGS: ClojureBasics,\n#+LAYOUT: post\n#+CATEGORIES: clojure\n* Differences\nThere are a few (as far as I know) differences between lambda functions (~fn~) and literal functions (~#(...)~):\n\n1. By definition, literal functions are the reader form(or sugar) of Clojure compiler, but lambda functions are not.\n\n   So ~read-string~ can be applied to literal functions.\n   #+BEGIN_SRC clojure\n     (read-string \"#(inc %)\")\n     ;; => (fn* [p1__37093#] (inc p1__37093#))\n   #+END_SRC\n\n2. [[../destructuring_assignment/#sec-1-3][Last time]] I say that ~fn~ implies a ~do~ in its body.\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n\n   #+BEGIN_SRC clojure\n     ((fn [x]\n         (prn x)\n         x) 3)\n   #+END_SRC\n   but literal functions must explicitly use ~do~ to wrap the two actions:\n   #+BEGIN_SRC clojure\n     (#(do (prn %)\n            %) 3)\n   #+END_SRC\n\n3. Literal functions cannot explicitly do arity variadic:\n\n   ~fn~ can do this:\n   #+BEGIN_SRC clojure\n     (fn []\n       (do sth1...)\n       [x]\n       (do sth2...)\n       [x y]\n       (do sth3...)\n       [x y & rest]\n       (do sth4...))\n   #+END_SRC\n   but literal functions can not.\n   However, literal functions can define a variadic function by using ~%&~:\n   #+BEGIN_SRC clojure\n     #(- % (apply + %&))\n     ;; this is exactly like\n     (fn [x & rest]\n       (- x (apply + rest)))\n   #+END_SRC\n\n4. Literal functions cannot be nested:\n\n   #+BEGIN_SRC clojure\n     ;; You CANNOT do this:\n     #(#(inc %))\n     ;; but you can use nest lambda functions:\n     (fn [x] (fn [y] (inc y)))\n   #+END_SRC\n","slug":"lambda-vs-literal-fn","published":1,"date":"2016-11-06T15:00:00.000Z","updated":"2016-11-06T16:09:55.000Z","title":"Differences Between Lambda functions and literal functions","comments":1,"layout":"post","photos":[],"link":"","_id":"civ7f9ldg0003r1kzbq51ru5f","content":"\n\n<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Differences</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nThere are a few (as far as I know) differences between lambda functions (<code>fn</code>) and literal functions (<code>#(...)</code>):\n</p>\n\n<ol class=\"org-ol\">\n<li>By definition, literal functions are the reader form(or sugar) of Clojure compiler, but lambda functions are not.\n\n<p>\nSo <code>read-string</code> can be applied to literal functions.\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">read-string</span> <span class=\"string\">&quot;#(inc %)&quot;</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (fn* [p1__37093#] (inc p1__37093#))</span></span><br></pre></td></tr></table></figure>\n</div>\n</li>\n\n<li><a href=\"../destructuring_assignment/#sec-1-3\">Last time</a> I say that <code>fn</code> implies a <code>do</code> in its body.\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[x]</span></span><br><span class=\"line\">    <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">prn</span></span> x)</span></span><br><span class=\"line\">    x)</span> <span class=\"number\">3</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nbut literal functions must explicitly use <code>do</code> to wrap the two actions:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">#</span><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">prn</span></span> %)</span></span><br><span class=\"line\">       %)</span> <span class=\"number\">3</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<ol class=\"org-ol\">\n<li>Literal functions cannot explicitly do arity variadic:\n\n<p>\n<code>fn</code> can do this:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth1...)</span></span><br><span class=\"line\">  <span class=\"collection\">[x]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth2...)</span></span><br><span class=\"line\">  <span class=\"collection\">[x y]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth3...)</span></span><br><span class=\"line\">  <span class=\"collection\">[x y &amp; rest]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth4...)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nbut literal functions can not.\nHowever, literal functions can define a variadic function by using <code>%&amp;</code>:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">#(- % (apply + %&amp;))</span><br><span class=\"line\">;; this is exactly like</span><br><span class=\"line\">(fn [x &amp; rest]</span><br><span class=\"line\">  (- x (apply + rest)))</span><br></pre></td></tr></table></figure>\n</div>\n</li>\n\n<li>Literal functions cannot be nested:\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">;; You CANNOT do this:</span><br><span class=\"line\">#(#(inc %))</span><br><span class=\"line\">;; but you can use nest lambda functions:</span><br><span class=\"line\">(fn [x] (fn [y] (inc y)))</span><br></pre></td></tr></table></figure>\n</div>\n</li>\n</ol>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\" target=\"_blank\" rel=\"external\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\" target=\"_blank\" rel=\"external\">Org Source</a> - Last Updated 2016-11-07 &#x4E00; 00:09.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)</div>\n","excerpt":"<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Differences</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nThere are a few (as far as I know) differences between lambda functions (<code>fn</code>) and literal functions (<code>#(...)</code>):\n</p>\n\n<ol class=\"org-ol\">\n<li>By definition, literal functions are the reader form(or sugar) of Clojure compiler, but lambda functions are not.\n\n<p>\nSo <code>read-string</code> can be applied to literal functions.\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">read-string</span> <span class=\"string\">&quot;#(inc %)&quot;</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (fn* [p1__37093#] (inc p1__37093#))</span></span><br></pre></td></tr></table></figure>\n</div>\n</li>\n\n<li><a href=\"../destructuring_assignment/#sec-1-3\">Last time</a> I say that <code>fn</code> implies a <code>do</code> in its body.\n</li>\n</ol>","more":"<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[x]</span></span><br><span class=\"line\">    <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">prn</span></span> x)</span></span><br><span class=\"line\">    x)</span> <span class=\"number\">3</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nbut literal functions must explicitly use <code>do</code> to wrap the two actions:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">#</span><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">prn</span></span> %)</span></span><br><span class=\"line\">       %)</span> <span class=\"number\">3</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<ol class=\"org-ol\">\n<li>Literal functions cannot explicitly do arity variadic:\n\n<p>\n<code>fn</code> can do this:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth1...)</span></span><br><span class=\"line\">  <span class=\"collection\">[x]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth2...)</span></span><br><span class=\"line\">  <span class=\"collection\">[x y]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth3...)</span></span><br><span class=\"line\">  <span class=\"collection\">[x y &amp; rest]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span> sth4...)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nbut literal functions can not.\nHowever, literal functions can define a variadic function by using <code>%&amp;</code>:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">#(- % (apply + %&amp;))</span><br><span class=\"line\">;; this is exactly like</span><br><span class=\"line\">(fn [x &amp; rest]</span><br><span class=\"line\">  (- x (apply + rest)))</span><br></pre></td></tr></table></figure>\n</div>\n</li>\n\n<li>Literal functions cannot be nested:\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">;; You CANNOT do this:</span><br><span class=\"line\">#(#(inc %))</span><br><span class=\"line\">;; but you can use nest lambda functions:</span><br><span class=\"line\">(fn [x] (fn [y] (inc y)))</span><br></pre></td></tr></table></figure>\n</div>\n</li>\n</ol>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\">Org Source</a> - Last Updated 2016-11-07 &#x4E00; 00:09.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</div>"}],"PostAsset":[],"PostCategory":[{"post_id":"civ7f9lcm0000r1kzgvphmwsx","category_id":"civ7f9leu0005r1kzjyjggwp7","_id":"civ7f9lg30008r1kzek6leaum"},{"post_id":"civ7f9lct0001r1kz8xpu4jck","category_id":"civ7f9lg20007r1kza3m2g0ff","_id":"civ7f9lg5000br1kzmze9oott"},{"post_id":"civ7f9ldg0003r1kzbq51ru5f","category_id":"civ7f9lg20007r1kza3m2g0ff","_id":"civ7f9lg6000er1kznf1n5kgm"}],"PostTag":[{"post_id":"civ7f9lcm0000r1kzgvphmwsx","tag_id":"civ7f9lep0004r1kz9a5r81tk","_id":"civ7f9lg6000dr1kzc2cian5v"},{"post_id":"civ7f9lcm0000r1kzgvphmwsx","tag_id":"civ7f9lg20006r1kzldnoxdi9","_id":"civ7f9lg6000fr1kz9o40hduw"},{"post_id":"civ7f9lcm0000r1kzgvphmwsx","tag_id":"civ7f9lg30009r1kz7pxnc6pk","_id":"civ7f9lg8000hr1kzh36xxke1"},{"post_id":"civ7f9lct0001r1kz8xpu4jck","tag_id":"civ7f9lg5000cr1kz0lh2hwx5","_id":"civ7f9lg8000ir1kznfmzvbvt"},{"post_id":"civ7f9ldg0003r1kzbq51ru5f","tag_id":"civ7f9lg5000cr1kz0lh2hwx5","_id":"civ7f9lg8000jr1kzffiyeiuf"}],"Tag":[{"name":"emacs","_id":"civ7f9lep0004r1kz9a5r81tk"},{"name":"orgmode","_id":"civ7f9lg20006r1kzldnoxdi9"},{"name":"hexo","_id":"civ7f9lg30009r1kz7pxnc6pk"},{"name":"ClojureBasics","_id":"civ7f9lg5000cr1kz0lh2hwx5"}]}}