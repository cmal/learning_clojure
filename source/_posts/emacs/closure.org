#+TITLE: Closure in Elisp, Lexical Binding After Emacs 24.1
#+DATE: <2016-11-07 Mon 23:25>
#+TAGS: Emacs,
#+LAYOUT: post
#+CATEGORIES: emacs

* Lexical Binding
  Lexical binding means form a closure in a (lambda) function body.

  What is lexical binding? Take a look at these examples:

  #+BEGIN_SRC emacs-lisp
    (let ((x 1))    ; x is lexically bound.
      (+ x 3)) ;; => 4
    (setq x 3)  ;; => 3

    (defun getx ()
      x) ;; => getx
    (getx) ;; => 3
    (let ((x 1))    ; x is lexically bound.
      (getx)) ;; => 1
  #+END_SRC
  The body in ~let~ forms a context in which ~x~ was bound to 1,
  rather than 3 in global context.

* Emacs Lexical-Binding Settings
  Lexical binding is a realtive new feature introduced into GNU Emacs,
  in version 24.1. Default GNU Emacs will not use lexical binding.

  So,
  #+BEGIN_SRC emacs-lisp
    (default-value 'lexical-binding)
    ;; => nil
    (lambda (x) (* x x))
    ;; => (lambda (x) (* x x))
  #+END_SRC

  But one can set variable ~lexical-binding~ to t, to make Emacs use
  lexical-binding. Lexical binding makes lambda function form a closure.
  #+BEGIN_SRC emacs-lisp
    (setq lexical-binding t)
    ;; => t
    (lambda (x) (* x x))
    ;; => (closure (t) (x) (* x x))
  #+END_SRC

  When writing Emacs Lisp extentions, one can set lexical-binding in the first
  line of `.el` files to force a lexical-binding context. e.g.
  #+BEGIN_SRC 
    ;;; some.el --- some extention for Emacs-lisp  -*- lexical-binding: t; -*-
  #+END_SRC

