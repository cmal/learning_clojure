{"md5":"f22c95b9bf6af5c5bac064213a54db2d","content":"\n\n<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Lexical Binding</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nLexical binding means form a closure in a (lambda) function body.\n</p>\n\n<p>\nWhat is lexical binding? Take a look at these examples:\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">let</span> <span class=\"list\">(<span class=\"list\">(<span class=\"keyword\">x</span> <span class=\"number\">1</span>)</span>)</span>    <span class=\"comment\">; x is lexically bound.</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">+</span> x <span class=\"number\">3</span>)</span>)</span> <span class=\"comment\">;; =&gt; 4</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">setq</span> x <span class=\"number\">3</span>)</span>  <span class=\"comment\">;; =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">defun</span> getx <span class=\"list\">()</span></span><br><span class=\"line\">  x)</span> <span class=\"comment\">;; =&gt; getx</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">getx</span>)</span> <span class=\"comment\">;; =&gt; 3</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">let</span> <span class=\"list\">(<span class=\"list\">(<span class=\"keyword\">x</span> <span class=\"number\">1</span>)</span>)</span>    <span class=\"comment\">; x is lexically bound.</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">getx</span>)</span>)</span> <span class=\"comment\">;; =&gt; 1</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nThe body in <code>let</code> forms a context in which <code>x</code> was bound to 1,\nrather than 3 in global context.\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\">Emacs Lexical-Binding Settings</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nLexical binding is a realtive new feature introduced into GNU Emacs,\nin version 24.1. Default GNU Emacs will not use lexical binding.\n</p>\n\n<p>\nSo,\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">default-value</span> <span class=\"quoted\">&apos;lexical-binding</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; nil</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">lambda</span> <span class=\"list\">(<span class=\"keyword\">x</span>)</span> <span class=\"list\">(<span class=\"keyword\">*</span> x x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (lambda (x) (* x x))</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nBut one can set variable <code>lexical-binding</code> to t, to make Emacs use\nlexical-binding. Lexical binding makes lambda function form a closure.\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">setq</span> lexical-binding <span class=\"literal\">t</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; t</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">lambda</span> <span class=\"list\">(<span class=\"keyword\">x</span>)</span> <span class=\"list\">(<span class=\"keyword\">*</span> x x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (closure (t) (x) (* x x))</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nWhen writing Emacs Lisp extentions, one can set lexical-binding in the first\nline of `.el` files to force a lexical-binding context. e.g.\n</p>\n<pre class=\"example\">\n;;; some.el --- some extention for Emacs-lisp  -*- lexical-binding: t; -*-\n</pre>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\">Org Source</a> - Last Updated 2016-11-28 &#x4E00; 12:58.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</div>\n"}
