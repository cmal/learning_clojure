{"md5":"e0024a4e43ded19f6c19761bb458c977","content":"\n\n<script>\n  function editAtGithub(isRaw){\n    var url_parts = document.location.pathname.split('/');\n    var postname = url_parts[url_parts.length - 2];\n    if(url_parts.length == 3){ // is a page(wiki about etc)\n      postname = postname + '/index.org';\n    }else{\n      postname = '_posts/' + postname + '.org';\n    }\n    var url = 'https://github.com/cmal/learning_clojure/tree/source/source/' + postname;\n    if(isRaw)\n      url = 'https://raw.githubusercontent.com/cmal/learning_clojure/source/source/' + postname;\n    window.open(url);\n  }\n</script>\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Clojure Destructuring Assignment</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nA simple example of Clojure&apos;s <code>let</code> assignment:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[x <span class=\"number\">8</span>]</span></span><br><span class=\"line\"> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 18</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\">Sequential Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\nTo omit trailing values in seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x y z]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y z)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;123&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo omit arbitrary values in seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x _ _ <span class=\"collection\">[y z]</span>]</span> <span class=\"collection\">[ <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"collection\">[<span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y z)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;145&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<!--more-->\n\n<p>\nTo gather extra-positional values:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x &amp; rest]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>]</span></span><br><span class=\"line\">  rest)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; (2 3)</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo retain the destructured seq:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[x _ z <span class=\"attribute\">:as</span> s]</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>]</span></span><br><span class=\"line\">  s)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [1 2 3]</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\">Map Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\nMap destructuring is not so intuitive as sequential destructuring.\nA common example:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{a <span class=\"attribute\">:a</span> b <span class=\"attribute\">:b</span> c <span class=\"string\">&quot;foo&quot;</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"string\">&quot;foo&quot;</span> <span class=\"string\">&quot;bar&quot;</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> a b c)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;12bar&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo destructure a seq using index:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{x <span class=\"number\">3</span> y <span class=\"number\">2</span>}</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> x y)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;43&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nTo destructure a nesting map:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{<span class=\"collection\">{x <span class=\"attribute\">:a</span>}</span> <span class=\"attribute\">:b</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"number\">1</span> <span class=\"attribute\">:a</span> <span class=\"number\">2</span>}</span>}</span>]</span></span><br><span class=\"line\">  x)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 2</span></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{<span class=\"collection\">[x _ y]</span> <span class=\"attribute\">:b</span>}</span> <span class=\"collection\">{<span class=\"attribute\">:b</span> <span class=\"collection\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"collection\">[x y]</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [1 3]</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nDefault values when not found:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">{k <span class=\"attribute\">:unknown</span> x <span class=\"attribute\">:a</span> <span class=\"attribute\">:or</span> <span class=\"collection\">{k <span class=\"string\">&quot;not found&quot;</span>}</span>}</span></span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span>}</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> k x)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;not found1&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nBinding using <code>:keys</code>, <code>:strs</code>, and <code>:syms</code>:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[mp <span class=\"collection\">{<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"attribute\">:c</span> <span class=\"number\">3</span> <span class=\"string\">&quot;d&quot;</span> <span class=\"number\">4</span> <span class=\"string\">&quot;e&quot;</span> <span class=\"number\">5</span> <span class=\"string\">&quot;f&quot;</span> <span class=\"number\">6</span> &apos;g <span class=\"number\">7</span> &apos;h <span class=\"number\">8</span>}</span></span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:keys</span> <span class=\"collection\">[a b c]</span>}</span> mp</span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:strs</span> <span class=\"collection\">[d e f]</span>}</span> mp</span><br><span class=\"line\">      <span class=\"collection\">{<span class=\"attribute\">:syms</span> <span class=\"collection\">[g h]</span>}</span> mp]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> a b c d e f g h)</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; &quot;12345678&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n<code>&amp;</code> will destructure rest sequences as map k/v pairs:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[k v &amp; <span class=\"collection\">{<span class=\"attribute\">:keys</span> <span class=\"collection\">[b c d]</span>}</span>]</span> <span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span> <span class=\"attribute\">:b</span> <span class=\"number\">2</span> <span class=\"attribute\">:c</span> <span class=\"number\">3</span> <span class=\"attribute\">:d</span> <span class=\"number\">4</span>]</span>]</span></span><br><span class=\"line\">  <span class=\"collection\">[<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> k v)</span> <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">str</span></span> b c d)</span>]</span>)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; [&quot;:a1&quot; &quot;234&quot;]</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nCollections can be used as keyword for destructuring:\n(a not so intuitive example)\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[<span class=\"collection\">[&amp; <span class=\"collection\">{x <span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span>]</span>}</span>]</span> &apos;<span class=\"list\">(<span class=\"collection\">[<span class=\"attribute\">:a</span> <span class=\"number\">1</span>]</span> <span class=\"number\">2</span>)</span>]</span></span><br><span class=\"line\">  x)</span></span><br><span class=\"line\"><span class=\"comment\">;; =&gt; 2</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\">Destructuring in <code>fn</code></h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\n<code>fn</code> implies a <code>let</code> in its assignment and a <code>do</code> in its body.\nActually, you can think the lambda function <code>fn</code> structure\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">fn</span></span> <span class=\"collection\">[x]</span></span><br><span class=\"line\">   <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span></span><br><span class=\"line\"> <span class=\"number\">8</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nas something like:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">let</span></span> <span class=\"collection\">[x <span class=\"number\">8</span>]</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">do</span></span></span><br><span class=\"line\">    <span class=\"list\">(<span class=\"keyword\"><span class=\"built_in\">+</span></span> <span class=\"number\">10</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nThen EVERYTHING ABOVE can be used in destructuring assignments of <code>fn</code>, just like in <code>let</code>.\nBut <code>fn</code> can do more, because of <a href=\"http://clojure-doc.org/articles/language/functions.html#multi-arity-functions\">arity variadic</a>.\n</p>\n</div>\n</div>\n</div>\n\n<div style=\"font-size: 14px;padding: 5px;line-height: 20px;border: 1px solid;\"><a href=\"javascript: editAtGithub();\">Edit Me at Github</a> - <a href=\"javascript: editAtGithub(true)\">Org Source</a> - Last Updated 2016-11-06 &#x65E5; 23:21.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</div>\n"}
